% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/align_dates_seasonal.R
\name{align_dates_seasonal}
\alias{align_dates_seasonal}
\alias{align_and_bin_dates_seasonal}
\title{Align dates for seasonal comparison}
\usage{
align_dates_seasonal(
  x,
  dates_from = NULL,
  date_resolution = c("week", "isoweek", "epiweek", "day", "month"),
  start = NULL,
  target_year = NULL,
  drop_leap_week = TRUE
)

align_and_bin_dates_seasonal(
  x,
  n = 1,
  dates_from,
  population = 1,
  fill_gaps = FALSE,
  date_resolution = c("week", "isoweek", "epiweek", "day", "month"),
  start = NULL,
  target_year = NULL,
  drop_leap_week = TRUE
)
}
\arguments{
\item{x}{A data frame with a date column or a date vector}

\item{dates_from}{Column name containing the dates to align. Used when x is a data.frame.
supported date formats are date and datetime and also commonly used character strings:
\itemize{
\item ISO dates "2024-03-09"
\item Month "2024-03"
\item Week "2024-W09" or "2024-W09-1"
}}

\item{date_resolution}{Character string specifying the temporal resolution.
One of:
\itemize{
\item "week" or "isoweek" - Calendar weeks (ISO), reporting weeks according tdevtoolo the ECDC.
\item "epiweek" - Epidemiological weeks (CDC), i.e. ISO weeks with Sunday as week start.
\item "month" - Calendar months
\item "day" - Daily resolution
}}

\item{start}{Numeric value indicating epidemic season start:
\itemize{
\item For week/epiweek: week number (default: 28, approximately July)
\item For month: month number (default: 7 for July)
\item For day: day of year (default: 150, approximately June)
}}

\item{target_year}{Numeric value for the reference year to align dates to. The default target year
is the start of the most recent season in the data. This way the most recent dates stay unchanged.}

\item{drop_leap_week}{If TRUE and date_resolution is \code{week}, \code{isoweek} or \code{epiweek}, leap weeks (week 53)
are dropped if they are not in the most recent season. Disable if data should be returned.
Dropping week 53 from historical data is the most common approach. Otherwise historical data for week 53 would
map to week 52 if the target season has no leap week, resulting in a doubling of the case counts.}

\item{n}{Numeric column with case counts. Supports quoted and unqouted column names.}

\item{population}{A number or a numeric column with the population size. Used to calculate the incidence.}

\item{fill_gaps}{Logical; If TRUE, gaps in the time series will be filled with 0 cases.}
}
\value{
A data frame with standardized date columns:
\itemize{
\item year: Calendar year from original date
\item week/month/day: Time unit based on chosen resolution
\item date_aligned: Date standardized to target year
\item season: Epidemic season identifier (e.g., "2023/24")
\item current_season: Logical flag for most recent season
}

Binning also creates the columns:
\itemize{
\item n: Sum of cases in bin
\item incidence: Incidence calculated using n/population
}
}
\description{
Standardizes dates from multiple years to enable comparison of epidemic curves
and visualization of seasonal patterns in infectious disease surveillance data.
Commonly used for creating periodicity plots of respiratory diseases like
influenza, RSV, or COVID-19.
}
\details{
This function helps create standardized epidemic curves by aligning surveillance
data from different years. This enables:
\itemize{
\item Comparison of disease patterns across multiple seasons
\item Identification of typical seasonal trends
\item Detection of unusual disease activity
\item Assessment of current season against historical patterns
}

The alignment can be done at different temporal resolutions (daily, weekly,
monthly) with customizable season start points to match different disease
patterns or surveillance protocols.
}
\examples{
# Sesonal Visualization of Germany Influenza Surveillance Data
library(ggplot2)

influenza_germany |>
  align_dates_seasonal(
    dates_from = ReportingWeek, date_resolution = "epiweek", start = 28
  ) -> df_flu_aligned

ggplot(df_flu_aligned, aes(x = date_aligned, y = Incidence, color = season)) +
  geom_line() +
  facet_wrap(~AgeGroup) +
  theme_bw()

}
