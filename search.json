[{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ggsurveillance.biostats.dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mousede: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ggsurveillance.biostats.dev/articles/align_dates_seasonal.html","id":"seasonal-alignment-and-plot","dir":"Articles","previous_headings":"","what":"Seasonal alignment and plot","title":"Seasonal Plots: Align case data for seasonal analysis","text":"","code":"library(ggplot2)  influenza_germany |>   align_dates_seasonal(     dates_from = ReportingWeek, date_resolution = \"epiweek\", start = 28   ) -> df_flu_aligned  ggplot(df_flu_aligned, aes(x = date_aligned, y = Incidence, color = season)) +   geom_line() +   facet_wrap(~AgeGroup) +   theme_bw() influenza_germany |>   align_dates_seasonal(dates_from = ReportingWeek) |>   group_by(AgeGroup, season) |>   tally(wt = Cases) |>   pivot_wider(names_from = AgeGroup, values_from = n) #> # A tibble: 6 × 5 #>   season   `00+` `00-14` `15-59` `60+` #>   <chr>    <dbl>   <dbl>   <dbl> <dbl> #> 1 2019/20 186788   58628   96769 30596 #> 2 2020/21    683     132     267   283 #> 3 2021/22  18980    7176    9580  2206 #> 4 2022/23 299167   93343  149590 55944 #> 5 2023/24 217233   57542   97618 61878 #> 6 2024/25  19931    5540    8421  5957"},{"path":"https://ggsurveillance.biostats.dev/articles/align_dates_seasonal.html","id":"other-visualisations","dir":"Articles","previous_headings":"","what":"Other visualisations","title":"Seasonal Plots: Align case data for seasonal analysis","text":"","code":"influenza_germany |>   filter(AgeGroup != \"00+\") |>   align_dates_seasonal(dates_from = ReportingWeek) |>   ggplot(aes(x = ReportingWeek, weight = Cases, fill = season)) +   # Use stat = count for more efficient plotting   geom_epicurve(color = NA, stat = \"count\") +   theme_bw()"},{"path":"https://ggsurveillance.biostats.dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Bartel. Author, maintainer.","code":""},{"path":"https://ggsurveillance.biostats.dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bartel (2025). ggsurveillance: Tools ggplot Extensions Infectious Disease Surveillance Outbreak Investigation. R package version 0.0.1.9000, https://github.com/biostats-dev/ggsurveillance, https://ggsurveillance.biostats.dev.","code":"@Manual{,   title = {ggsurveillance: Tools And ggplot Extensions For Infectious Disease Surveillance And Outbreak Investigation},   author = {Alexander Bartel},   year = {2025},   note = {R package version 0.0.1.9000, https://github.com/biostats-dev/ggsurveillance},   url = {https://ggsurveillance.biostats.dev}, }"},{"path":"https://ggsurveillance.biostats.dev/index.html","id":"ggsurveillance-","dir":"","previous_headings":"","what":"Tools And ggplot Extensions For Infectious Disease Surveillance And Outbreak Investigation","title":"Tools And ggplot Extensions For Infectious Disease Surveillance And Outbreak Investigation","text":"ggsurveillance R package helpful tools ggplot extensions epidemiology, especially infectious disease surveillance outbreak investigation. functions provide tidy functional interfaces easy integration tidyverse. documentation vignettes see: ggsurveillance.biostats.dev packages provides: geom_epicurve() : ggplot geom plotting epicurves, includes date aggregation including scale_y_cases_5er() better (case) count axis breaks positioning. align_dates_seasonal() : Align surveillance data seasonal plots (e.g. flu season). create_agegroups(): Create reproducible age groups highly customizable labels. geom_epigantt() : geom epigantt plots. Helpful visualize overlapping time intervals contact tracing. (Beta) : geometric_mean() , expand_counts(),","code":""},{"path":"https://ggsurveillance.biostats.dev/index.html","id":"creating-epicurves","dir":"","previous_headings":"","what":"Creating Epicurves","title":"Tools And ggplot Extensions For Infectious Disease Surveillance And Outbreak Investigation","text":"","code":"library(ggplot2) library(tidyr) library(outbreaks) library(ggsurveillance)  sars_canada_2003 |> #SARS dataset from outbreaks   pivot_longer(starts_with(\"cases\"),                 names_prefix = \"cases_\",                 names_to = \"origin\") |>   ggplot(aes(x = date, weight = value, fill = origin)) +   geom_epicurve(date_resolution = \"week\") +   scale_x_date(date_labels = \"W%V'%g\", date_breaks = \"2 weeks\") +   scale_y_cases_5er() +   scale_fill_brewer(type = \"qual\", palette = 6) +   theme_classic()"},{"path":"https://ggsurveillance.biostats.dev/index.html","id":"align-surveillance-data-for-seasonal-comparison","dir":"","previous_headings":"","what":"Align surveillance data for seasonal comparison","title":"Tools And ggplot Extensions For Infectious Disease Surveillance And Outbreak Investigation","text":"","code":"library(ggplot2) library(ggsurveillance)  influenza_germany |>   align_dates_seasonal(dates_from = ReportingWeek,                        date_resolution = \"isoweek\",                        start = 28) -> df_flu_aligned  ggplot(df_flu_aligned, aes(x = date_aligned, y = Incidence)) +   stat_summary(data = . %>% filter(!current_season), fun.data = median_hilow,                geom = \"ribbon\", alpha = 0.3) +   stat_summary(data = . %>% filter(!current_season), fun = median,                geom = \"line\") +   geom_line(data = . %>% filter(current_season), color = \"dodgerblue4\",              linewidth = 2) +   scale_x_date(date_labels = \"%b'%y\") +   facet_wrap(~AgeGroup, labeller = label_both) +   theme_bw()"},{"path":"https://ggsurveillance.biostats.dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools And ggplot Extensions For Infectious Disease Surveillance And Outbreak Investigation","text":"Install development version :","code":"devtools::install_github(\"biostats-dev/ggsurveillance\")  # or directly with renv: renv::install(\"biostats-dev/ggsurveillance\")"},{"path":"https://ggsurveillance.biostats.dev/reference/align_dates_seasonal.html","id":null,"dir":"Reference","previous_headings":"","what":"Align dates for seasonal comparison — align_dates_seasonal","title":"Align dates for seasonal comparison — align_dates_seasonal","text":"Standardizes dates multiple years enable comparison epidemic curves visualization seasonal patterns infectious disease surveillance data. Commonly used creating periodicity plots respiratory diseases like influenza, RSV, COVID-19.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/align_dates_seasonal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align dates for seasonal comparison — align_dates_seasonal","text":"","code":"align_dates_seasonal(   x,   dates_from = NULL,   date_resolution = c(\"week\", \"isoweek\", \"epiweek\", \"day\", \"month\"),   start = NULL,   target_year = NULL,   drop_leap_week = TRUE )  align_and_bin_dates_seasonal(   x,   n = 1,   dates_from,   population = 1,   fill_gaps = FALSE,   date_resolution = c(\"week\", \"isoweek\", \"epiweek\", \"day\", \"month\"),   start = NULL,   target_year = NULL,   drop_leap_week = TRUE )"},{"path":"https://ggsurveillance.biostats.dev/reference/align_dates_seasonal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align dates for seasonal comparison — align_dates_seasonal","text":"x Either data frame date column, date vector. Supported date formats date datetime also commonly used character strings: ISO dates \"2024-03-09\" Month \"2024-03\" Week \"2024-W09\" \"2024-W09-1\" dates_from Column name containing dates align. Used x data.frame. date_resolution Character string specifying temporal resolution. One : \"week\" \"isoweek\" - Calendar weeks (ISO 8601), reporting weeks used ECDC. \"epiweek\" - Epidemiological weeks (US CDC), .e. ISO weeks Sunday week start. \"month\" - Calendar months \"day\" - Daily resolution start Numeric value indicating epidemic season start: week/epiweek: week number (default: 28, approximately July) month: month number (default: 7 July) day: day year (default: 150, approximately June) target_year Numeric value reference year align dates . default target year start recent season data. way recent dates stay unchanged. drop_leap_week TRUE date_resolution week, isoweek epiweek, leap weeks (week 53) dropped recent season. Disable data returned. Dropping week 53 historical data common approach. Otherwise historical data week 53 map week 52 target season leap week, resulting doubling case counts. n Numeric column case counts. Supports quoted unquoted column names. population number numeric column population size. Used calculate incidence. fill_gaps Logical; TRUE, gaps time series filled 0 cases.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/align_dates_seasonal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align dates for seasonal comparison — align_dates_seasonal","text":"data frame standardized date columns: year: Calendar year original date week/month/day: Time unit based chosen resolution date_aligned: Date standardized target year season: Epidemic season identifier (e.g., \"2023/24\") current_season: Logical flag recent season Binning also creates columns: n: Sum cases bin incidence: Incidence calculated using n/population","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/align_dates_seasonal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align dates for seasonal comparison — align_dates_seasonal","text":"function helps create standardized epidemic curves aligning surveillance data different years. enables: Comparison disease patterns across multiple seasons Identification typical seasonal trends Detection unusual disease activity Assessment current season historical patterns alignment can done different temporal resolutions (daily, weekly, monthly) customizable season start points match different disease patterns surveillance protocols.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/align_dates_seasonal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align dates for seasonal comparison — align_dates_seasonal","text":"","code":"# Sesonal Visualization of Germany Influenza Surveillance Data library(ggplot2)  influenza_germany |>   align_dates_seasonal(     dates_from = ReportingWeek, date_resolution = \"epiweek\", start = 28   ) -> df_flu_aligned  ggplot(df_flu_aligned, aes(x = date_aligned, y = Incidence, color = season)) +   geom_line() +   facet_wrap(~AgeGroup) +   theme_bw()"},{"path":"https://ggsurveillance.biostats.dev/reference/create_agegroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Age Groups from Numeric Values — create_agegroups","title":"Create Age Groups from Numeric Values — create_agegroups","text":"Creates age groups numeric values using customizable break points formatting options. function allows flexible formatting customization age group labels. factor returned, factor includes factor levels unobserved age groups. allows reproducible age groups, can used joining data (e.g. adding age grouped population numbers incidence calculation).","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/create_agegroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Age Groups from Numeric Values — create_agegroups","text":"","code":"create_agegroups(   values,   age_breaks = c(5, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90),   breaks_as_lower_bound = TRUE,   first_group_format = \"0-{x}\",   interval_format = \"{x}-{y}\",   last_group_format = \"{x}+\",   pad_numbers = FALSE,   pad_with = \"0\",   collapse_single_year_groups = FALSE,   na_label = NA,   return_factor = FALSE )"},{"path":"https://ggsurveillance.biostats.dev/reference/create_agegroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Age Groups from Numeric Values — create_agegroups","text":"values Numeric vector ages grouped age_breaks Numeric vector break points age groups.  Default: c(5, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90) breaks_as_lower_bound Logical; TRUE (default), breaks treated lower bounds intervals. FALSE, upper bounds. first_group_format Character string template first age group. Uses glue syntax.  Default: \"0-\\{x\\}\", common styles: \"≤\\{x\\}\", \"<\\{x+1\\}\" interval_format Character string template intermediate age groups. Uses glue syntax. Default: \"\\{x\\}-\\{y\\}\", common styles: \"\\{x\\} \\{y\\}\" last_group_format Character string template last age group. Uses glue syntax.  Default: \"\\{x\\}+\", common styles: \"≥\\{x\\}\",\">\\{x-1\\}\" pad_numbers Logical numeric; numeric, pad numbers specified length (Tip: use 2). compatible calculations within glue formats. Default: FALSE pad_with Character use padding numbers. Default: \"0\" collapse_single_year_groups Logical; TRUE, groups spanning single years collapsed. Default: FALSE na_label Label NA values. NA, keeps default NA handling. Default: NA return_factor Logical; TRUE, returns factor, FALSE returns character vector. Default: FALSE","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/create_agegroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Age Groups from Numeric Values — create_agegroups","text":"Vector age group labels (character factor depending return_factor)","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/create_agegroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Age Groups from Numeric Values — create_agegroups","text":"","code":"# Basic usage create_agegroups(1:100) #>   [1] \"0-4\"   \"0-4\"   \"0-4\"   \"0-4\"   \"5-9\"   \"5-9\"   \"5-9\"   \"5-9\"   \"5-9\"   #>  [10] \"10-14\" \"10-14\" \"10-14\" \"10-14\" \"10-14\" \"15-19\" \"15-19\" \"15-19\" \"15-19\" #>  [19] \"15-19\" \"20-24\" \"20-24\" \"20-24\" \"20-24\" \"20-24\" \"25-29\" \"25-29\" \"25-29\" #>  [28] \"25-29\" \"25-29\" \"30-39\" \"30-39\" \"30-39\" \"30-39\" \"30-39\" \"30-39\" \"30-39\" #>  [37] \"30-39\" \"30-39\" \"30-39\" \"40-49\" \"40-49\" \"40-49\" \"40-49\" \"40-49\" \"40-49\" #>  [46] \"40-49\" \"40-49\" \"40-49\" \"40-49\" \"50-59\" \"50-59\" \"50-59\" \"50-59\" \"50-59\" #>  [55] \"50-59\" \"50-59\" \"50-59\" \"50-59\" \"50-59\" \"60-69\" \"60-69\" \"60-69\" \"60-69\" #>  [64] \"60-69\" \"60-69\" \"60-69\" \"60-69\" \"60-69\" \"60-69\" \"70-79\" \"70-79\" \"70-79\" #>  [73] \"70-79\" \"70-79\" \"70-79\" \"70-79\" \"70-79\" \"70-79\" \"70-79\" \"80-89\" \"80-89\" #>  [82] \"80-89\" \"80-89\" \"80-89\" \"80-89\" \"80-89\" \"80-89\" \"80-89\" \"80-89\" \"90+\"   #>  [91] \"90+\"   \"90+\"   \"90+\"   \"90+\"   \"90+\"   \"90+\"   \"90+\"   \"90+\"   \"90+\"   #> [100] \"90+\"    # Custom formatting with upper bounds create_agegroups(1:100,   breaks_as_lower_bound = FALSE,   interval_format = \"{x} to {y}\",   first_group_format = \"0 to {x}\" ) #>   [1] \"0 to 5\"   \"0 to 5\"   \"0 to 5\"   \"0 to 5\"   \"0 to 5\"   \"6 to 10\"  #>   [7] \"6 to 10\"  \"6 to 10\"  \"6 to 10\"  \"6 to 10\"  \"11 to 15\" \"11 to 15\" #>  [13] \"11 to 15\" \"11 to 15\" \"11 to 15\" \"16 to 20\" \"16 to 20\" \"16 to 20\" #>  [19] \"16 to 20\" \"16 to 20\" \"21 to 25\" \"21 to 25\" \"21 to 25\" \"21 to 25\" #>  [25] \"21 to 25\" \"26 to 30\" \"26 to 30\" \"26 to 30\" \"26 to 30\" \"26 to 30\" #>  [31] \"31 to 40\" \"31 to 40\" \"31 to 40\" \"31 to 40\" \"31 to 40\" \"31 to 40\" #>  [37] \"31 to 40\" \"31 to 40\" \"31 to 40\" \"31 to 40\" \"41 to 50\" \"41 to 50\" #>  [43] \"41 to 50\" \"41 to 50\" \"41 to 50\" \"41 to 50\" \"41 to 50\" \"41 to 50\" #>  [49] \"41 to 50\" \"41 to 50\" \"51 to 60\" \"51 to 60\" \"51 to 60\" \"51 to 60\" #>  [55] \"51 to 60\" \"51 to 60\" \"51 to 60\" \"51 to 60\" \"51 to 60\" \"51 to 60\" #>  [61] \"61 to 70\" \"61 to 70\" \"61 to 70\" \"61 to 70\" \"61 to 70\" \"61 to 70\" #>  [67] \"61 to 70\" \"61 to 70\" \"61 to 70\" \"61 to 70\" \"71 to 80\" \"71 to 80\" #>  [73] \"71 to 80\" \"71 to 80\" \"71 to 80\" \"71 to 80\" \"71 to 80\" \"71 to 80\" #>  [79] \"71 to 80\" \"71 to 80\" \"81 to 90\" \"81 to 90\" \"81 to 90\" \"81 to 90\" #>  [85] \"81 to 90\" \"81 to 90\" \"81 to 90\" \"81 to 90\" \"81 to 90\" \"81 to 90\" #>  [91] \"91+\"      \"91+\"      \"91+\"      \"91+\"      \"91+\"      \"91+\"      #>  [97] \"91+\"      \"91+\"      \"91+\"      \"91+\"       # Ages 1 to 5 are kept as numbers by collapsing single year groups create_agegroups(1:10,   age_breaks = c(1, 2, 3, 4, 5, 10),   collapse_single_year_groups = TRUE ) #>  [1] \"1\"   \"2\"   \"3\"   \"4\"   \"5-9\" \"5-9\" \"5-9\" \"5-9\" \"5-9\" \"10+\""},{"path":"https://ggsurveillance.biostats.dev/reference/geom_epicurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an epidemic curve plot — geom_epicurve","title":"Create an epidemic curve plot — geom_epicurve","text":"Creates epicurve plot visualizing epidemic case counts outbreaks (epidemiological curves). epicurve bar plot, every case outlined. geom_epicurve additionally provides date-based aggregation cases (e.g. per week month many ). week aggregation isoweek (World + ECDC) epiweek (US CDC) supported.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/geom_epicurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an epidemic curve plot — geom_epicurve","text":"","code":"geom_epicurve(   mapping = NULL,   data = NULL,   stat = \"epicurve\",   position = \"stack\",   date_resolution = NULL,   width = NULL,   relative.width = 1,   week_start = getOption(\"lubridate.week.start\", 1),   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://ggsurveillance.biostats.dev/reference/geom_epicurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an epidemic curve plot — geom_epicurve","text":"mapping Set aesthetic mappings created aes. Commonly used mappings: x y: date datetime. Numeric technically supported. fill: colouring groups weight: data already aggregated (e.g. case counts) data data frame containing variables plot stat either \"epicurve\" outlines around cases \"count\" outlines around (fill) groups. large numbers cases please use \"count\". position Position adjustment. Currently supports \"stack\". date_resolution Character string specifying time unit date aggregation. Set NULL date aggregation  Possible values : \"day\", \"week\", \"month\", \"bimonth\", \"season\", \"quarter\", \"halfyear\", \"year\". width Numeric value specifying width bars. NULL, calculated based resolution relative.width relative.width Numeric value 0 1 adjusting relative width bars. Defaults 1 week_start Integer specifying start week (1 = Monday, 7 = Sunday).  used date_resolution includes weeks. Defaults 1 (Monday).  isoweek use week_start = 1 epiweek use week_start = 7. ... arguments passed layer. example: colour Colour outlines around cases. Disable colour = NA. Defaults \"white\". linewidth  Width case outlines. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/geom_epicurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an epidemic curve plot — geom_epicurve","text":"ggplot2 layer can added plot","code":""},{"path":[]},{"path":"https://ggsurveillance.biostats.dev/reference/geom_epicurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an epidemic curve plot — geom_epicurve","text":"","code":"# Basic epicurve with dates library(ggplot2)  data <- data.frame(date = as.Date(\"2024-01-01\") + 0:30) ggplot(data, aes(x = date)) +   geom_epicurve(date_resolution = \"week\") +   scale_y_cases_5er() +   scale_x_date(date_labels = \"W%V'%g\") # Correct ISOWeek labels week'year   # Categorical epicurve library(tidyr) library(outbreaks)  sars_canada_2003 |> # SARS dataset from outbreaks   pivot_longer(starts_with(\"cases\"), names_prefix = \"cases_\", names_to = \"origin\") |>   ggplot(aes(x = date, weight = value, fill = origin)) +   geom_epicurve(date_resolution = \"week\") +   scale_x_date(date_labels = \"W%V'%g\", date_breaks = \"2 weeks\") +   scale_y_cases_5er() +   theme_classic()"},{"path":"https://ggsurveillance.biostats.dev/reference/geom_epigantt.html","id":null,"dir":"Reference","previous_headings":"","what":"Epi Gantt Chart: Visualize Epidemiological Time Intervals — geom_epigantt","title":"Epi Gantt Chart: Visualize Epidemiological Time Intervals — geom_epigantt","text":"Various ways representing vertical interval defined y, xmin xmax. case draws single graphical object.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/geom_epigantt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epi Gantt Chart: Visualize Epidemiological Time Intervals — geom_epigantt","text":"","code":"geom_epigantt(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://ggsurveillance.biostats.dev/reference/geom_epigantt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epi Gantt Chart: Visualize Epidemiological Time Intervals — geom_epigantt","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/geometric_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Geometric Mean — geometric_mean","title":"Compute a Geometric Mean — geometric_mean","text":"geometric mean typically defined strictly positive values. function computes geometric mean numeric vector, option replace certain values (e.g., zeros, non-positive values, values user-specified threshold) computation.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/geometric_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Geometric Mean — geometric_mean","text":"","code":"geometric_mean(   x,   na.rm = FALSE,   replace_value = NULL,   replace = c(\"all\", \"non-positive\", \"zero\") )"},{"path":"https://ggsurveillance.biostats.dev/reference/geometric_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Geometric Mean — geometric_mean","text":"x numeric complex vector values. na.rm Logical. FALSE (default), presence zero negative values triggers warning returns NA. TRUE, values (NA) removed computing geometric mean. replace_value Numeric NULL. value used replacement, depending replace (e.g., detection limit (LOD) quantification limit (LOQ)). NULL, replacement performed. recommendations use, see details. replace Character string indicating values replace: \"\" Replaces values less replace_value replace_value. useful global threshold (limit detection) measurement replaced. \"non-positive\" Replaces non-positive values (x <= 0) replace_value. helpful zeros negative values known invalid certain limit. \"zero\" Replaces exact zeros (x == 0) replace_value. Useful negative values treated missing.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/geometric_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Geometric Mean — geometric_mean","text":"single numeric value representing geometric mean processed vector x, NA resulting vector empty (e.g., na.rm = TRUE removes positive values) non-positive values exist na.rm = FALSE.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/geometric_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a Geometric Mean — geometric_mean","text":"Replacement Considerations: geometric mean defined strictly positive numbers (\\(x > 0\\)). Despite , geometric mean can useful laboratory measurements can contain 0 negative values. values treated NA removed, results upward bias due missingness. reduce , values limit detection (LOD) limit quantification (LOQ) often replaced chosen limit, making limit practical lower limit measurement scale. therefore often recommended approach. also alternatives approaches, values replaced either \\(\\frac{LOD}{2}\\) \\(\\frac{LOD}{\\sqrt{2}}\\) (LOQ). approaches create gap distribution values (e.g. values \\(\\frac{LOD}{2} < x < LOD\\)) therefore used caution. replacement approach values LOD LOQ material effect interpretation results, values treated statistically censored. case, proper statistical methods handle (left) censored data used. replace_value provided, function first perform specified replacements, proceed geometric mean calculation. replacements requested zero negative values remain na.rm = FALSE, NA returned warning.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/geometric_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a Geometric Mean — geometric_mean","text":"","code":"# Basic usage with no replacements: x <- c(1, 2, 3, 4, 5) geometric_mean(x) #> [1] 2.605171  # Replace all values < 0.5 with 0.5 (common in LOD scenarios): x3 <- c(0.1, 0.2, 0.4, 1, 5) geometric_mean(x3, replace_value = 0.5, replace = \"all\") #> 3 values were substituted with 0.5. #> [1] 0.9102821  # Remove zero or negative values, since log(0) = -Inf and log(-1) = NaN x4 <- c(-1, 0, 1, 2, 3) geometric_mean(x4, na.rm = TRUE) #> [1] 1.817121"},{"path":"https://ggsurveillance.biostats.dev/reference/influenza_germany.html","id":null,"dir":"Reference","previous_headings":"","what":"Germany Influenza (FLU) Surveillance data — influenza_germany","title":"Germany Influenza (FLU) Surveillance data — influenza_germany","text":"subset weekly German influenza surveillance data 2020 2024.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/influenza_germany.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Germany Influenza (FLU) Surveillance data — influenza_germany","text":"","code":"influenza_germany"},{"path":"https://ggsurveillance.biostats.dev/reference/influenza_germany.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Germany Influenza (FLU) Surveillance data — influenza_germany","text":"object class tbl_df (inherits tbl, data.frame) 1029 rows 4 columns.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/influenza_germany.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Germany Influenza (FLU) Surveillance data — influenza_germany","text":"License CC-4.0: Robert Koch-Institut (2025): Laborbestätigte Influenzafälle Deutschland. Dataset. Zenodo. DOI:10.5281/zenodo.14619502. https://github.com/robert-koch-institut/Influenzafaelle_in_Deutschland","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/influenza_germany.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Germany Influenza (FLU) Surveillance data — influenza_germany","text":"data frame 1,029 rows 4 columns: ReportingWeek Reporting Week \"2024-W03\" format AgeGroup Age groups: 00+ 00-14, 15-59 60+ age stratified cases. Cases Year Incidence Calculated weekly incidence","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/scale_y_cases_5er.html","id":null,"dir":"Reference","previous_headings":"","what":"Continuous x-axis and y-axis scale for (case) counts — scale_y_cases_5er","title":"Continuous x-axis and y-axis scale for (case) counts — scale_y_cases_5er","text":"continuous ggplot scale count data sane defaults breaks. uses base::pretty() increase default number breaks prefers 5er breaks. Additionally, first tick (.e. zero) aligned lower left corner.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/scale_y_cases_5er.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continuous x-axis and y-axis scale for (case) counts — scale_y_cases_5er","text":"","code":"scale_y_cases_5er(   name = waiver(),   n = 8,   n.min = 5,   u5.bias = 4,   expand = NULL,   labels = waiver(),   limits = NULL,   oob = scales::censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   guide = waiver(),   ... )  scale_x_cases_5er(   name = waiver(),   n = 8,   n.min = 5,   u5.bias = 4,   expand = NULL,   labels = waiver(),   limits = NULL,   oob = scales::censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   guide = waiver(),   ... )"},{"path":"https://ggsurveillance.biostats.dev/reference/scale_y_cases_5er.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continuous x-axis and y-axis scale for (case) counts — scale_y_cases_5er","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. n Target number breaks passed base::pretty(). Defaults 8. n.min Minimum number breaks passed base::pretty(). Defaults 5. u5.bias \"5-bias\" parameter passed base::pretty(); higher values push breaks strongly toward multiples 5. Defaults 4. expand Uses expansion logic. Use expand = waiver() restore ggplot defaults ggplot2::expansion() modify labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans Deprecated favour transform. position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. guide function used create guide name. See guides() information. ... Additional arguments passed base::pretty().","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/scale_y_cases_5er.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continuous x-axis and y-axis scale for (case) counts — scale_y_cases_5er","text":"ggplot2 scale object can added plot.","code":""},{"path":[]},{"path":"https://ggsurveillance.biostats.dev/reference/scale_y_cases_5er.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continuous x-axis and y-axis scale for (case) counts — scale_y_cases_5er","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2)  data <- data.frame(date = as.Date(\"2024-01-01\") + 0:30) ggplot(data, aes(x = date)) +   geom_epicurve(date_resolution = \"week\") +   scale_y_cases_5er() } # }"},{"path":"https://ggsurveillance.biostats.dev/reference/uncount.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate rows according to a weighting variable — uncount","title":"Duplicate rows according to a weighting variable — uncount","text":"uncount() provided tidyr package, re-exported ggsurveillance. See tidyr::uncount() details. uncount() alias expand_counts() complements dplyr::count(): take data frame column frequencies duplicate row according frequencies.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/uncount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate rows according to a weighting variable — uncount","text":"","code":"uncount(data, weights, ..., .remove = TRUE, .id = NULL)  expand_counts(data, weights, ..., .remove = TRUE, .id = NULL)"},{"path":"https://ggsurveillance.biostats.dev/reference/uncount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duplicate rows according to a weighting variable — uncount","text":"data data frame, tibble, grouped tibble. weights vector weights. Evaluated context data; supports quasiquotation. ... Additional arguments passed methods. .remove TRUE, weights name column data, column removed. .id Supply string create new variable gives unique identifier created row.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/uncount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duplicate rows according to a weighting variable — uncount","text":"data frame rows duplicated according weights.","code":""},{"path":"https://ggsurveillance.biostats.dev/reference/uncount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duplicate rows according to a weighting variable — uncount","text":"","code":"df <- data.frame(x = c(\"a\", \"b\"), n = c(2, 3)) df |> uncount(n) #>   x #> 1 a #> 2 a #> 3 b #> 4 b #> 5 b # Or equivalently: df |> expand_counts(n) #>   x #> 1 a #> 2 a #> 3 b #> 4 b #> 5 b"}]
